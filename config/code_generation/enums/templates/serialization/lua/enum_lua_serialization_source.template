#include "EngineCommon/precomp.h"

#include "GameLogic/Scripting/TypeBindings/Generated/Enums/{enum_name}LuaTypeBindings.generated.h"

#include "EngineCommon/Types/String/StringHelpers.h"

#include "EngineData/TypeUtils/EnumUtils.h"

#include "GameData/Enums/{enum_name}.generated.h"

#include "GameUtils/Scripting/LuaBasicTypeBindings.h"
#include "GameUtils/Scripting/LuaReadValueHelperMacros.h"
#include "GameUtils/Scripting/LuaType.h"

void LuaTypeImplementation<{enum_name}>::PushValue(lua_State& state, const {enum_name}& value) noexcept
{{
	LuaInternal::PushCString(state, ID_TO_STR(enum_to_string(value)).c_str());
}}

std::optional<{enum_name}> LuaTypeImplementation<{enum_name}>::ReadValue(lua_State& state, const int index) noexcept
{{
	LUA_READ_VALUE_INTO_VARIABLE(state, index, const char*, rawStringValue);
	const std::optional<{enum_name}> result = string_to_enum<{enum_name}>(STR_TO_ID(std::string_view(rawStringValue)));
	if (!result) [[unlikely]]
	{{
		LuaInternal::ReportScriptError(state, FormatString("Invalid value for enum {enum_name}: '%s'", rawStringValue).c_str());
	}}
	return result;
}}
