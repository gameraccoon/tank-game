#include "EngineCommon/precomp.h"

#include "GameData/Enums/{enum_name}.generated.h"

template<>
StringId get_enum_name<{enum_name}>()
{{
	return STR_TO_ID("{enum_name}");
}}

template<>
StringId enum_to_string(const {enum_name} value)
{{
	switch(value)
	{{
		{enum_to_string_case}
	}}
	return StringId();
}}

template<>
{enum_name} string_to_enum(const StringId value)
{{
	{string_to_enum_case}
	return static_cast<{enum_name}>(0);
}}

template<>
std::vector<{enum_name}> get_all_enum_values()
{{
	return {{
		{enum_value_with_type}
	}};
}}

template<>
std::vector<StringId> get_all_enum_value_names<{enum_name}>()
{{
	// to satisfy MSVC limitations for conseval function calls we need to split the declaration and the usage
	{enum_string_id_declaration}

	return {{
		{enum_value_string}
	}};
}}